from aiogram import types
from aiogram.client.session import aiohttp
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import ClientSession
from services.api_client import handle_api_response
from bot_config import API_LINK


async def cmd_book(message: Message):
    try:
        event_id = int(message.text.split()[1])
        user_id = message.from_user.id

        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_LINK}/reservation/", json={"user_id": user_id, "event_id": event_id}
            ) as response:
                data = await response.json()

                if response.status == 201:
                    reservation_id = data["data"]["id"]
                    await message.reply(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{reservation_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                else:
                    error_detail = data.get("detail", "Unknown error")
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")

    except (IndexError, ValueError):
        await message.reply("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /book <ID_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è>\n–ü—Ä–∏–º–µ—Ä: /book 5")
    except Exception as e:
        await message.reply("üöß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


async def cmd_my_reservations(message: Message):
    user_id = message.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_LINK}/reservation/user/{user_id}") as response:
            data = await response.json()

            if response.status == 200:
                reservations = data["data"]
                if reservations:
                    res_list = "\n".join(
                        [f"üé´ #{res['id']}: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {res['event_id']} ({res['status']})" for res in reservations]
                    )
                    await message.reply(f"üìñ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n{res_list}")
                else:
                    await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            else:
                error_detail = data.get("detail", "Unknown error")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")


async def cmd_cancel(message: Message):
    try:
        reservation_id = int(message.text.split()[1])
        user_id = message.from_user.id

        async with aiohttp.ClientSession() as session:
            async with session.delete(
                f"{API_LINK}/reservation/{reservation_id}", json={"user_id": user_id}
            ) as response:
                if response.status == 204:
                    await message.reply(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{reservation_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
                else:
                    data = await response.json()
                    error_detail = data.get("detail", "Unknown error")
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")

    except (IndexError, ValueError):
        await message.reply("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /cancel <ID_–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è>\n–ü—Ä–∏–º–µ—Ä: /cancel 12")
    except Exception as e:
        await message.reply("üöß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


async def cmd_event_reservations(message: Message):
    try:
        event_id = int(message.text.split()[1])
        user_id = message.from_user.id

        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{API_LINK}/reservation/event/{event_id}/reservations",
                params={"user_id": user_id, "event_id": event_id},
            ) as response:
                data = await response.json()

                if response.status == 200:
                    reservations = data["data"]
                    if reservations:
                        res_list = "\n".join(
                            [f"üéüÔ∏è #{res['id']}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {res['user_id']} ({res['status']})" for res in reservations]
                        )
                        await message.reply(f"üìä –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è #{event_id}:\n{res_list}")
                    else:
                        await message.reply("üì≠ –ù–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
                else:
                    error_detail = data.get("detail", "Unknown error")
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")

    except (IndexError, ValueError):
        await message.reply("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /event_reservations <ID_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è>\n–ü—Ä–∏–º–µ—Ä: /event_reservations 5")
    except Exception as e:
        await message.reply("üöß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


def format_reservations(reservations):
    if not reservations:
        return "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
    return "üìñ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(
        f"üé´ #{res['id']}: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {res['event_id']} ({res['status']})" for res in reservations
    )
