from datetime import datetime

from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import ClientSession
from bot_config import API_LINK
from services.api_client import handle_api_response


async def cmd_create_event(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        args = message.text.split()[1:]
        if len(args) < 4:
            raise ValueError

        title = args[0]
        description = args[1]
        date = args[2]
        seats = int(args[3])

        datetime.strptime(date, "%Y-%m-%d")

        async with ClientSession() as session:
            response = await session.post(
                f"http://{API_LINK}:8000/events/create",
                json={
                    "title": title,
                    "description": description,
                    "date": date,
                    "available_seats": seats,
                    "user_id": message.from_user.id,
                },
            )
            return await handle_api_response(
                response,
                message,
                success_msg=f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
                error_prefix="–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            )
    except ValueError:
        await message.reply(
            "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/create_event <–ù–∞–∑–≤–∞–Ω–∏–µ> <–û–ø–∏—Å–∞–Ω–∏–µ> <–î–∞—Ç–∞(YYYY-MM-DD)> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/create_event –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—èIT 'IT-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è' 2024-12-15 100"
        )
    except Exception as e:
        await message.reply(f"üöß –û—à–∏–±–∫–∞: {str(e)}")


async def cmd_update_event(message: Message):
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            raise ValueError

        event_id = int(args[0])
        update_data = {}

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for param in args[1:]:
            if "=" in param:
                key, value = param.split("=", 1)
                key = key.strip().lower()

                if key == "seats":
                    update_data["available_seats"] = int(value)
                elif key == "title":
                    update_data["title"] = value
                elif key == "description":
                    update_data["description"] = value
                elif key == "date":
                    datetime.strptime(value, "%Y-%m-%d")
                    update_data["date"] = value

        if not update_data:
            raise ValueError("–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        async with ClientSession() as session:
            response = await session.patch(
                f"http://{API_LINK}:8000/events/{event_id}",
                json={"user_id": message.from_user.id, "event_id": event_id, **update_data},
            )
            return await handle_api_response(
                response,
                message,
                success_handler=lambda data: (
                    f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                    f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['data']['title']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['data']['description']}\n"
                    f"–î–∞—Ç–∞: {data['data']['date']}\n"
                    f"–ú–µ—Å—Ç: {data['data']['available_seats']}"
                ),
                error_prefix="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            )

    except ValueError as e:
        await message.reply(
            f"‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/update_event <ID_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"title=–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            f"description=–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            f"date=2024-12-31\n"
            f"seats=50\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"/update_event 15 title=–ù–æ–≤–æ–µ–ù–∞–∑–≤–∞–Ω–∏–µ seats=50"
        )
    except Exception as e:
        await message.reply(f"üöß –û—à–∏–±–∫–∞: {str(e)}")


async def cmd_get_event(message: Message):
    try:
        event_id = int(message.text.split()[1])
        async with ClientSession() as session:
            response = await session.get(f"http://{API_LINK}:8000/events/{event_id}", params={"event_id": event_id})
            return await handle_api_response(
                response,
                message,
                success_handler=lambda data: (
                    f"üìÖ {data['data']['title']}\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['data']['description']}\n"
                    f"–î–∞—Ç–∞: {data['data']['date']}\n"
                    f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {data['data']['available_seats']}\n"
                    f"ID: {data['data']['id']}"
                ),
                error_prefix="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",
            )
    except (IndexError, ValueError):
        await message.reply("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /event <ID_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è>")


async def cmd_search_events(message: Message):
    try:
        search_query = message.text.split()[1]
        async with ClientSession() as session:
            response = await session.get(f"http://{API_LINK}:8000/events/", params={"title": search_query})
            return await handle_api_response(
                response,
                message,
                success_handler=lambda data: format_events_list(data["data"]),
                error_prefix="–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            )
    except IndexError:
        await message.reply("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: /search_event <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


def format_events_list(events):
    if not events:
        return "üîç –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    return "üìÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n" + "\n\n".join(
        f"{e['id']}. {e['title']}\n"
        f"–î–∞—Ç–∞: {e['date']}\n"
        f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {e['available_seats']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {e['description'][:50]}..."
        for e in events
    )
