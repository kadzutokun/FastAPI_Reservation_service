services:
  fastapi:
    build: .
    container_name: fastapi
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}"
    depends_on:
      - postgres
      - kafka
    networks:
      - fastapi_network
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  telegram-bot:
    build: .
    container_name: telegram-bot
    volumes:
      - .:/app
    environment:
      DATABASE_URL: "postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}"
      API_BASE_URL: "http://fastapi:8000"
      TELEGRAM_TOKEN: "${TELEGRAM_TOKEN}"
    depends_on:
      - fastapi
    networks:
      - fastapi_network
    command: ["python", "telegram_bot/main.py"]

  postgres:
    image: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    container_name: pgdb
    volumes:
      - pgdbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fastapi_network

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - fastapi_network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
    depends_on:
      - zookeeper
    networks:
      - fastapi_network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-admin
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - fastapi_network

volumes:
  pgdbdata:

networks:
  fastapi_network: